name: Build and Deploy Warehouse Management System

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '22.14.0'
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.2.5'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Set environment variables
      run: |
        echo "NODE_ENV=development" >> $GITHUB_ENV
        echo "SERVER_API_URL=https://super-broccoli-pj96jxxr4p7q3945r-8080.app.github.dev/" >> $GITHUB_ENV
        echo "APP_VERSION=GITHUB-ACTIONS-${{ github.run_number }}" >> $GITHUB_ENV
        echo "MONGODB_URI=mongodb+srv://Admin:Admin_1234@cluster0.bfpk1jw.mongodb.net/warehoure?retryWrites=true&w=majority&appName=Cluster0&tls=true" >> $GITHUB_ENV
        
    - name: Debug environment
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Java version: $(java --version)"
        echo "Maven version: $(mvn --version)"
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
    - name: Fix npm build issues
      run: |
        chmod +x fix-npm-build.sh
        ./fix-npm-build.sh
        
    - name: Install dependencies
      run: |
        npm install --no-optional --no-audit --no-fund
        
    - name: Test webpack configuration
      run: |
        echo "Testing webpack configuration..."
        node -e "console.log('Environment.js syntax OK'); const env = require('./webpack/environment.js'); console.log('SERVER_API_URL:', env.SERVER_API_URL);"
        
    - name: Build frontend
      run: |
        echo "Building frontend..."
        npm run webapp:build
        echo "Frontend build completed"
        
    - name: Build backend
      run: |
        echo "Building backend..."
        ./mvnw clean compile -DskipTests
        echo "Backend build completed"
        
    - name: Run tests
      run: |
        echo "Running tests..."
        ./mvnw test -Dskip.npm
        echo "Tests completed"
        
    - name: Build full application
      run: |
        echo "Building full application..."
        ./mvnw clean package -DskipTests -Pprod
        echo "Full build completed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: warehouse-mgmt-build
        path: |
          target/*.jar
          target/classes/static/
        retention-days: 7
        
    - name: Build status
      run: |
        echo "✅ Build completed successfully!"
        echo "📦 Artifacts:"
        ls -la target/*.jar 2>/dev/null || echo "No JAR files found"
        echo "📁 Static files:"
        ls -la target/classes/static/ 2>/dev/null || echo "No static files found"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: warehouse-mgmt-build
        
    - name: Deploy to GitHub Pages (if needed)
      run: |
        echo "🚀 Deployment completed!"
        echo "📋 Next steps:"
        echo "1. Start the application with: java -jar target/warehouse-mgmt-*.jar"
        echo "2. Access the application at: http://localhost:8080"
        echo "3. For cloud deployment, use the cloud profile: java -jar target/warehouse-mgmt-*.jar --spring.profiles.active=cloud" 