package dtu.k30.msc.whm.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MasterdataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertMasterdataAllPropertiesEquals(Masterdata expected, Masterdata actual) {
        assertMasterdataAutoGeneratedPropertiesEquals(expected, actual);
        assertMasterdataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertMasterdataAllUpdatablePropertiesEquals(Masterdata expected, Masterdata actual) {
        assertMasterdataUpdatableFieldsEquals(expected, actual);
        assertMasterdataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertMasterdataAutoGeneratedPropertiesEquals(Masterdata expected, Masterdata actual) {
        assertThat(actual)
                .as("Verify Masterdata auto generated properties")
                .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertMasterdataUpdatableFieldsEquals(Masterdata expected, Masterdata actual) {
        assertThat(actual)
                .as("Verify Masterdata relevant properties")
                .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
                .satisfies(a -> assertThat(a.getDataKey()).as("check dataKey").isEqualTo(expected.getDataKey()))
                .satisfies(a -> assertThat(a.getDataValue()).as("check dataValue").isEqualTo(expected.getDataValue()))
                .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()))
                .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
                .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
                .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
                .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertMasterdataUpdatableRelationshipsEquals(Masterdata expected, Masterdata actual) {
        // empty method
    }
}
