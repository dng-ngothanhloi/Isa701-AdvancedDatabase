package dtu.k30.msc.whm.domain;

import static dtu.k30.msc.whm.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ChiTietNhapXuatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiTietNhapXuatAllPropertiesEquals(ChiTietNhapXuat expected, ChiTietNhapXuat actual) {
        assertChiTietNhapXuatAutoGeneratedPropertiesEquals(expected, actual);
        assertChiTietNhapXuatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiTietNhapXuatAllUpdatablePropertiesEquals(ChiTietNhapXuat expected, ChiTietNhapXuat actual) {
        assertChiTietNhapXuatUpdatableFieldsEquals(expected, actual);
        assertChiTietNhapXuatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiTietNhapXuatAutoGeneratedPropertiesEquals(ChiTietNhapXuat expected, ChiTietNhapXuat actual) {
        assertThat(actual)
            .as("Verify ChiTietNhapXuat auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiTietNhapXuatUpdatableFieldsEquals(ChiTietNhapXuat expected, ChiTietNhapXuat actual) {
        assertThat(actual)
            .as("Verify ChiTietNhapXuat relevant properties")
            .satisfies(a -> assertThat(a.getSoLuong()).as("check soLuong").isEqualTo(expected.getSoLuong()))
            .satisfies(a ->
                assertThat(a.getDonGia()).as("check donGia").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDonGia())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
            .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChiTietNhapXuatUpdatableRelationshipsEquals(ChiTietNhapXuat expected, ChiTietNhapXuat actual) {
        assertThat(actual)
            .as("Verify ChiTietNhapXuat relationships")
            .satisfies(a -> assertThat(a.getPhieuNhapXuat()).as("check phieuNhapXuat").isEqualTo(expected.getPhieuNhapXuat()))
            .satisfies(a -> assertThat(a.getMaHang()).as("check maHang").isEqualTo(expected.getMaHang()));
    }
}
