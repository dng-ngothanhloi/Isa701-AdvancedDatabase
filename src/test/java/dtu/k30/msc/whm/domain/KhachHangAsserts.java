package dtu.k30.msc.whm.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class KhachHangAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertKhachHangAllPropertiesEquals(KhachHang expected, KhachHang actual) {
        assertKhachHangAutoGeneratedPropertiesEquals(expected, actual);
        assertKhachHangAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertKhachHangAllUpdatablePropertiesEquals(KhachHang expected, KhachHang actual) {
        assertKhachHangUpdatableFieldsEquals(expected, actual);
        assertKhachHangUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertKhachHangAutoGeneratedPropertiesEquals(KhachHang expected, KhachHang actual) {
        assertThat(actual)
                .as("Verify KhachHang auto generated properties")
                .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertKhachHangUpdatableFieldsEquals(KhachHang expected, KhachHang actual) {
        assertThat(actual)
                .as("Verify KhachHang relevant properties")
                .satisfies(a -> assertThat(a.getMaKH()).as("check maKH").isEqualTo(expected.getMaKH()))
                .satisfies(a -> assertThat(a.getTenKH()).as("check tenKH").isEqualTo(expected.getTenKH()))
                .satisfies(a -> assertThat(a.getGoiTinh()).as("check goiTinh").isEqualTo(expected.getGoiTinh()))
                .satisfies(a -> assertThat(a.getDateOfBirth()).as("check dateOfBirth").isEqualTo(expected.getDateOfBirth()))
                .satisfies(a -> assertThat(a.getDiaChi()).as("check diaChi").isEqualTo(expected.getDiaChi()))
                .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
                .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
                .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
                .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
                .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertKhachHangUpdatableRelationshipsEquals(KhachHang expected, KhachHang actual) {
        // empty method
    }
}
