package dtu.k30.msc.whm.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PhieuNhapXuatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertPhieuNhapXuatAllPropertiesEquals(PhieuNhapXuat expected, PhieuNhapXuat actual) {
        assertPhieuNhapXuatAutoGeneratedPropertiesEquals(expected, actual);
        assertPhieuNhapXuatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertPhieuNhapXuatAllUpdatablePropertiesEquals(PhieuNhapXuat expected, PhieuNhapXuat actual) {
        assertPhieuNhapXuatUpdatableFieldsEquals(expected, actual);
        assertPhieuNhapXuatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertPhieuNhapXuatAutoGeneratedPropertiesEquals(PhieuNhapXuat expected, PhieuNhapXuat actual) {
        assertThat(actual)
                .as("Verify PhieuNhapXuat auto generated properties")
                .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertPhieuNhapXuatUpdatableFieldsEquals(PhieuNhapXuat expected, PhieuNhapXuat actual) {
        assertThat(actual)
                .as("Verify PhieuNhapXuat relevant properties")
                .satisfies(a -> assertThat(a.getMaPhieu()).as("check maPhieu").isEqualTo(expected.getMaPhieu()))
                .satisfies(a -> assertThat(a.getNgayLapPhieu()).as("check ngayLapPhieu").isEqualTo(expected.getNgayLapPhieu()))
                .satisfies(a -> assertThat(a.getLoaiPhieu()).as("check loaiPhieu").isEqualTo(expected.getLoaiPhieu()))
                .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
                .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
                .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
                .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()))
                .satisfies(a -> assertThat(a.getIsDeleted()).as("check isDeleted").isEqualTo(expected.getIsDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertPhieuNhapXuatUpdatableRelationshipsEquals(PhieuNhapXuat expected, PhieuNhapXuat actual) {
        assertThat(actual)
                .as("Verify PhieuNhapXuat relationships")
                .satisfies(a -> assertThat(a.getKhachHang()).as("check khachHang").isEqualTo(expected.getKhachHang()));
    }
}
