package dtu.k30.msc.whm.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DanhMucHangEmbeddedAsserts {

    /**
     * Asserts that the embedded entity has all properties (fields/relationships) set.
     *
     * @param expected the expected embedded entity
     * @param actual the actual embedded entity
     */
    public static void assertDanhMucHangEmbeddedAllPropertiesEquals(DanhMucHangEmbedded expected, DanhMucHangEmbedded actual) {
        assertDanhMucHangEmbeddedAutoGeneratedPropertiesEquals(expected, actual);
        assertDanhMucHangEmbeddedAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the embedded entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected embedded entity
     * @param actual the actual embedded entity
     */
    public static void assertDanhMucHangEmbeddedAllUpdatablePropertiesEquals(DanhMucHangEmbedded expected, DanhMucHangEmbedded actual) {
        assertDanhMucHangEmbeddedUpdatableFieldsEquals(expected, actual);
        assertDanhMucHangEmbeddedUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the embedded entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected embedded entity
     * @param actual the actual embedded entity
     */
    public static void assertDanhMucHangEmbeddedAutoGeneratedPropertiesEquals(DanhMucHangEmbedded expected, DanhMucHangEmbedded actual) {
        assertThat(actual)
            .as("Verify DanhMucHangEmbedded auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the embedded entity has all the updatable fields set.
     * Selective embedding: Only essential fields are checked.
     *
     * @param expected the expected embedded entity
     * @param actual the actual embedded entity
     */
    public static void assertDanhMucHangEmbeddedUpdatableFieldsEquals(DanhMucHangEmbedded expected, DanhMucHangEmbedded actual) {
        assertThat(actual)
            .as("Verify DanhMucHangEmbedded relevant properties")
            .satisfies(a -> assertThat(a.getMaHang()).as("check maHang").isEqualTo(expected.getMaHang()))
            .satisfies(a -> assertThat(a.getTenHang()).as("check tenHang").isEqualTo(expected.getTenHang()))
            .satisfies(a -> assertThat(a.getDonviTinh()).as("check donviTinh").isEqualTo(expected.getDonviTinh()));
        // Removed: noiSanXuat, ngaySanXuat, hanSuDung, audit fields for selective embedding
    }

    /**
     * Asserts that the embedded entity has all the updatable relationships set.
     *
     * @param expected the expected embedded entity
     * @param actual the actual embedded entity
     */
    public static void assertDanhMucHangEmbeddedUpdatableRelationshipsEquals(DanhMucHangEmbedded expected, DanhMucHangEmbedded actual) {
        // empty method
    }
} 